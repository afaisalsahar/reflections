1) How did viewing a diff between two versions help you spot the bug?
Since I could see what was deleted in the old version and what was added in the new version side by side, that made finding bug easier.

2) Saving manual copies?
I've been saving manual copies of my FCC assignments recently and that works too, I've also kinda known about the history tab in wikipedia but never actually clicked to see what's there? Will definetly check it out.

3) What do you think are the pros and cons of manually choosing when to create a commit, like you do in Git, vs having versions automatically saved, like Google Docs does?
Well the pros of choosing when to create a commit manually is you can seperate the commits into logical chunks, for instance after you implement a feature or finish an assingment and that control is not available with autmatic commits, it makes a clear and clean history but it's also possible that you may forget to create a commit and that's a down side to manual commits.

4) How could having easy access to the entire history of a file make you a more effecient programmer in the long term?
Being able to access the entire history of a file makes programming more effecient because if you want to checkout an older version of a file when theprogram was a certain way that you want now is easier. It's also good for tracking who made changes to a particular file if you are working with otherdevelopers.

5) How can you use the commands git log and git diff to view the history of files?
The git log command is unsurprisingly "git log" and it displays a history of all commits in a repository and git diff is also very similiar to defaultunix like diff command but it just comes with one more added feature of allowing for the commits to be compared not just files, well also I have to see whether it can compare files even though it sounds like just not so requried because the diff command already does that.

6) How might using version control make you more confident to make changes that could break something?
The way it makes a developer more confident to go ahead and make changes while at the same time not being worried about the fact that it may break something is as soon as you have a working version you can commit and come back to it anytime you feel lost or don't want to spend time fixing bugs.

7) Now that you have your workspace set up, what do you want to try using Git for?
I want to use git for my programs and to manage my code well.
